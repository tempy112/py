შექმენით პირველი კლასის იგივე უმაღლესი რიგის ფუნქცია, რომელიც <h1> …</h1> ტეგებში ჩასვამს, String ტიპის მონაცემებს btuAI და TeslaAI-ს და <p>…</p> ტეგებში ჩასვამს ასევე String ტიპის მონაცემს PythonAI-ს. 
def html_tag(tag):
   def wrap_text(msg):
       print('<{0}>{1}</{0}>'.format(tag,msg))
   return wrap_text
print_h1=html_tag('h1')
print_h1('btuAI ')
print_h1('TeslaAI')
print_p=html_tag('p')
print_p('PythonAi')
2. Flask-ის REST API გარემოში შექმენით შემდეგი დასახელების კურსები, dictionaty ფორმატში:
      Description:Python in AI,
      course_id:0,
      name:Python AI Certificate,
      site:btu.edu.ge
     
   
      Description":"CCNA,
      course_id:1,
      name:CCNA Certificate,
      site:netacad.com
     
     
      Description:Linux,
      course_id:2,
      name:Linux Certificate,
      site:netdevgroup.com
შესაბამისი HTTP მეთოდის მეშვეობით მოახდინეთ, ზემოთ აღწერილი ერთ-ერთი კურსის გასაღები სიტყვის განახლება, შემდეგი მონაცემით:
    Description:BTULinux
დაწერეთ ბრძანება, რომელიც უნდა დაიწეროს cmd-ში, რომ წარმატებით შესრულდის მონაცემის განახლების მოქმედება 
from flask import Flask, jsonify
app=Flask(_name_)
courses=[{
     "Description":"Python in AI",
     "course_id":"0",
     "name":"Python AI Certificate",
     "site":"btu.edu.ge"
     },
    {
     "Description":"CCNA",
     "course_id":"1",
     "name":"CCNA Certificate",
     "site":"netacad.com"
     },
    {
     "Description":"Linux",
     "course_id":"2",
     "name":"Linux Certificate",
     "site":"netdevgroup.com"
}]
@app.route('/')
def index():
   return "Python, CCNA, Linux, OpenAI"
@app.route("/courses", methods=['GET'])
def get():
   return jsonify({'Courses':courses})
@app.route("/courses/<int:course_id>", methods=['GET'])
def get_course(course_id):
   return jsonify({'course':courses[course_id]})

@app.route("/courses/<int:course_id>", methods=['PUT'])
def course_update(course_id):
   courses[course_id]['Description']="BTULinux"
   return jsonify({'course':courses[course_id]})
@app.route("/courses/<int:course_id>", methods=['DELETE'])
def delete(course_id):
   courses.remove(courses[course_id])
   return jsonify({'result':True})
if _name__=="__main_":
   app.run(debug=True)
curl -i -H Content-Type: Application/json -X PUT http://127.0.0.1:5000/courses/2
Flask-ის REST API-ის გარემოში არსებული შემდეგი dictionary:
id:1,
name:Elon Musk,
 author:Ashlee Vance
  id:2,
  name:Steve Jobs,
  author:Walter Isaacson
ჩავაშენოთ მონაცემთა ბაზის ცხრილში.
from flask import Flask, make_response, jsonify, request
import dataset
app=Flask(_name_)
db=dataset.connect('sqlite:///api.db')
books={
       '1':{
           "id":"1",
           "name":"Elon Musk",
           "author":"Ashlee Vance"
           },
       '2':{
           "id":"2",
           "name":"Steve Jobs",
           "author":"Walter Isaacson"
           }
       }
table=db['books']
table.insert({
    "book_id":"1",
    "name":"Elon Musk",
    "author":"Ashlee Vance"
    })
table.insert({
    "book_id":"2",
    "name":"Steve Jobs",
    "author":"Walter Isaacson"
    })
def fetch_db(book_id):
    return table.find_one(book_id=book_id)
def fetch_db_all():
    return table.all()
@app.route('/api/books', methods=['GET'])
def api_books():
    if request.method=='GET':
        return make_response(jsonify(books))
if _name__=='__main_':
    app.run()
4.Flask-ის REST API გარემოში შექმენით შემდეგი დასახელების კურსები, dictionaty ფორმატში:
      Description:Python in AI,
      course_id:0,
      name:Python AI Certificate,
      site:btu.edu.ge
     
   
      Description":"CCNA,
      course_id:1,
      name:CCNA Certificate,
      site:netacad.com
     
     
      Description:Linux,
      course_id:2,
      name:Linux Certificate,
      site:netdevgroup.com
შესაბამისი HTTP მეთოდის მეშვეობით მოახდინეთ, ზემოთ აღწერილ კურსებიდან, ერთ-ერთი წაშლა, დაწერეთ ბრძანება, რომელიც უნდა დაიწეროს cmd-ში, რომ წარმატებით შესრულდის ერთ-ერთი კურსის წაშლა
from flask import Flask, jsonify
app=Flask(_name_)
courses=[{
      "Description":"Python in AI",
      "course_id":"0",
      "name":"Python AI Certificate",
      "site":"btu.edu.ge"
      },
     {
      "Description":"CCNA",
      "course_id":"1",
      "name":"CCNA Certificate",
      "site":"netacad.com"
      },
     {
      "Description":"Linux",
      "course_id":"2",
      "name":"Linux Certificate",
      "site":"netdevgroup.com"
 }]
@app.route('/')
def index():
    return "Python, CCNA, Linux, OpenAI"
@app.route("/courses", methods=['GET'])
def get():
    return jsonify({'Courses':courses})
@app.route("/courses/<int:course_id>", methods=['GET'])
def get_course(course_id):
    return jsonify({'course':courses[course_id]})
@app.route("/courses/<int:course_id>", methods=['DELETE'])
def delete(course_id):
    courses.remove(courses[course_id])
    return jsonify({'result':True})
if _name__=="__main_":
    app.run(debug=True)
curl -i -H Content-Type: Application/json -X DELETE http://127.0.0.1:5000/courses/2
5. შექმენით მონაცემთა ბაზა, რომელშიც იქნება ჩაშენებული ორი ცხრილი, დასახელებებით: gta და cities. ცხრილ gta-ში ჩავაშენოთ, შემდეგი მონაცემები:
(1997, "GTA",'New Guernsey'),
 (1999, "GTA", "USA"),
 (2001, "GTA III","Liberty City"),
 (2002, "GTA:Vice City", "Vice City"),
  (2004, "GTA: San Andreas", "San Andreas"),
  (2008, "GTA IV", "Liberty City")
ცხრილ cities-ში ჩავაშენოთ, შემდეგი მონაცემები:
("Liberty City", "New York")
მოვახდინოთ, ორივე ცხრილის მონაცემების ცვლილება, კერძოდ ჩავანაცვლოთ New York-თ ის მნიშვნელობები, რომლებიც უტოლდება Liberty City-ს, სხვა შემთხევაში მივიღოთ შედეგები იტერაციის შედეგად. 
import sqlite3
# dbase=sqlite3.connect('gta.sqlite')
# gta=dbase.cursor()
# list=[
#       (1997, "GTA",'New Guernsey'),
#       (1999, "GTA", "USA"),
#       (2001, "GTA III","Liberty City"),
#       (2002, "GTA:Vice City", "Vice City"),
#       (2004, "GTA: San Andreas", "San Andreas"),
#       (2008, "GTA IV", "Liberty City")
#       ]
# gta.execute('''create table if not exists gta(
#                 year integer,
#                 name text,
#                 city text
#
#     )''')
#
# gta.executemany("insert into gta values (?,?,?)", list)
# for row in gta.execute("select * from gta"):
#     print(row)
# print('************')
# gta.execute("select * from gta where city=:c", {"c":"Liberty City"})
# gta_search=gta.fetchall()
# print(gta_search)
# gta.execute("""create table if not exists cities (
#                 gta_city text,
#                 real_city text
#     )""")
#
# gta.execute("insert into cities values(?,?)", ("Liberty City", "New York"))
# gta.execute("select * from cities where gta_city=:c",{"c":"Liberty City"})
# cities_search=gta.fetchall()
# print(cities_search)
# print("*******")
# for i in gta_search:
#     loop = [cities_search[0][1] if value == cities_search[0][0] else value for value in i]
#     print(loop)
# dbase.commit()
# dbase.close()
#
6.        შექმენით Closures(დახურული) ტიპი ფუნქცია ანუ კო
დში აღწერეთ შემდეგი  ფუნქციები: outer_func() და inner_func(),  სადაც outer_func()-ის შიგთავსში შექმნილი იქნება String ტიპის მონაცემის მქონე ცვლადი და inner_func()-ის მეშვეობით გავუშვებთ მას ბეჭდვაზე, ხოლო outer_func-ზე მიმართვით ავამუშავებთ პროგრამას(10 ქულა)
def outer_func():
   message = 'Python'
   def inner_func():
      print(message)
   return inner_func
def outerFunction(text):
   def innerFunction():
       print(text)
   return innerFunction
a=outerFunction('Tesla')
a()
7. ბიბლიოთეკა BeautifulSoup-ის მეშვეობით მოახდინეთ საიტ https://realpython.github.io/fake-jobs/-ის div ტეგ ატრიბუტით id='ResultsContainer'-ზე წვდომა და მის შიგთავსში არსებულ ტეგ 'h2', კლასით class_='title is-5'-ზე, რისი საშუალებითაც პროგრამის გაშვების შემთხვევაში, უნდა ხდებოდეს ვებ-გვერდზე არსებული სამსახურების დასახელებების გამოტანა  IDE-ში.
import requests
from bs4 import BeautifulSoup
url='https://realpython.github.io/fake-jobs/'
html=requests.get(url)
tesla=BeautifulSoup(html.content, 'html.parser')
results=tesla.find(id='ResultsContainer')
job_title=results.find_all('h2', class_='title is-5')
for job in job_title:
   print(job.text)
8. Flask-ის REST API გარემოში შექმენით შემდეგი დასახელების კურსები, dictionaty ფორმატში:
      Description:Python in AI,
      course_id:0,
      name:Python AI Certificate,
      site:btu.edu.ge
     
   
      Description":"CCNA,
      course_id:1,
      name:CCNA Certificate,
      site:netacad.com
     
     
      Description:Linux,
      course_id:2,
      name:Linux Certificate,
      site:netdevgroup.com
შესაბამისი HTTP მეთოდის მეშვეობით მოახდინეთ, ზემოთ აღწერილ კურსებზე, კიდევ შემდეგი კურსის დამატება:
    Description:SQLserver,
    course_id:3,
    name:SQLserver Certificate,
    site:mygreatlearning.com
დაწერეთ ბრძანება, რომელიც უნდა დაიწეროს cmd-ში, რომ წარმატებით შესრულდის კიდევ ერთი კურსის დამატება.
from flask import Flask, jsonify
app=Flask(_name_)
courses=[{
      "Description":"Python in AI",
      "course_id":"0",
      "name":"Python AI Certificate",
      "site":"btu.edu.ge"
      },
     {
      "Description":"CCNA",
      "course_id":"1",
      "name":"CCNA Certificate",
      "site":"netacad.com"
      },
     {
      "Description":"Linux",
      "course_id":"2",
      "name":"Linux Certificate",
      "site":"netdevgroup.com"
 }]
@app.route('/')
def index():
    return "Python, CCNA, Linux, OpenAI"
@app.route("/courses", methods=['GET'])
def get():
    return jsonify({'Courses':courses})
@app.route("/courses/<int:course_id>", methods=['GET'])
def get_course(course_id):
    return jsonify({'course':courses[course_id]})
@app.route("/courses", methods=['POST'])
def create():
    course={"Description":"SQLserver",
    "course_id":"3",
    "name":"SQLserver Certificate",
    "site":"mygreatlearning.com"}
    courses.append(course)
    return jsonify({'Created':course})
if _name__=="__main_":
    app.run(debug=True)
curl -i -H Content-Type: Application/json -X POST http://127.0.0.1:5000/courses
9. დაწერეთ კოდი, რომელიც თავის ლოგიკის მიხედვით მოახდენს  ბიბლიოთეკა MechanicalSoup-ის მეშვეობით საიტ https://en.wikipedia.org/wiki/Comparison_of_Linux_distributions -ის ტეგ: th-თან და მის კლასზე: table-rh_თან  დაკავშირებას და მასში არსებულ ინფორმაციაზე ექნება წვდომა, აგრეთვე დაწერეთ კოდი, რომლმაც უნდა მოახდინოს წვდომა საიტის td ტეგებზე. გამოიყენეთ ბიბლიოთეკა Pandas-ის DataFrame ფუნქცია, რომელიც მოახდენს მონაცემთა მოწესრიგებულ წარმოდგენას.
შექმენით მონაცემთა ბაზის სტრუქტურა, მასში ცხრილის ორგანიზებით ანუ სვეტების დასახელებების განსაზღვრით:
               ["Founder",
                "Maintainer",
                "Initial_Release_Year",
                "Current_Stable_Version",
                "Security_Updates",
                "Release_Date",
                "System_Distribution_Commitment",
                "Forked_From",
                "Target_Audience",
                "Cost",
                "Status"]
 რომელშიც კოდის გაშვების შემთხვევაში მოხდება ზემოთ მითითებული საიტის ტეგებიდან იმპორტირებული, მონაცემების ჩაშენება.
import mechanicalsoup
import pandas as pd
import sqlite3
openai = mechanicalsoup.StatefulBrowser()
openai.open("https://en.wikipedia.org/wiki/Comparison_of_Linux_distributions")
th = openai.page.find_all("th", attrs={"class": "table-rh"})
distro = [value.text.replace("\n", "") for value in th]
distro = distro[:95]
td = openai.page.find_all("td")
columns = [value.text.replace("\n", "") for value in td]
columns = columns[6:1051]
column_names = ["Founder",
               "Maintainer",
               "Initial_Release_Year",
               "Current_Stable_Version",
               "Security_Updates",
               "Release_Date",
               "System_Distribution_Commitment",
               "Forked_From",
               "Target_Audience",
               "Cost",
               "Status"]
dictionary = {"Distribution": distro}
for idx, key in enumerate(column_names):
   dictionary[key] = columns[idx:][::11]
df = pd.DataFrame(data = dictionary)
connection = sqlite3.connect("linux_distro.db")
cursor = connection.cursor()
cursor.execute("create table linux (Distro, " + ",".join(column_names)+ ")")
for i in range(len(df)):
   cursor.execute("insert into linux values (?,?,?,?,?,?,?,?,?,?,?,?)", df.iloc[i]) #iloc=integer location
connection.commit()
connection.close()
10. დაწერეთ კოდი, რომელიც თავის ლოგიკის მიხედვით მოახდენს  ბიბლიოთეკების BeautifulSoup-ის, urllib.request-ის და re-ს  მეშვეობით საიტ https://docs.python.org/3/library/random.html -ის ტეგებზე dt (ატრიბუტით id=random) და dd-ზე წვდომას, random ბიბლიოთეკის კლასების დასახელებების და მათი აღწერილობის გამოსატანად ბიბლიოთეკა Pandas-ის DataFrame ფორმატში.
# import requests
# from bs4 import BeautifulSoup
# import pandas as pd
# url = "https://docs.python.org/3/library/random.html"
# response = requests.get(url)
# soup = BeautifulSoup(response.content, "html.parser")
# functions = []
# descriptions = []
# dl_tags = soup.find_all("dl", class_="function")
# for dl in dl_tags:
#     function_name = dl.dt.get_text(strip=True)
#     description = dl.dd.get_text(strip=True)
#     functions.append(function_name)
#     descriptions.append(description)
# data = {"Function": functions, "Description": descriptions}
# df = pd.DataFrame(data)
# print(df)
11. Flask-ის გარემოში შექმენით წიგნების სია, მათი დასახელებით, ფასით და isbn კოდით, შემდეგ შესაბამისი url მისამართის საშუალებით, წიგნის isbn კოდის მიხედვით მოახდინეთ წიგნის დასახელების და ფასის, ბრაუზერის ეკრანზე გამოტანა.
rom flask import Flask, jsonify, request
# app=Flask(_name_)
# books=[
#     {
#      'name': 'Harry Poter',
#      'price': 9,
#      'isbn': 10213
#      },
#     {
#      'name': 'Harry Hogwars',
#      'price': 9.99,
#      'isbn': 2313,
#      }
# ]
# @app.route('/')
# def main():
#     return "HELLO /books an /books/isbn(kodi)"
#
# @app.route('/books')
# def get_books():
#     return jsonify({'books':books})
# @app.route('/books/<int:isbn>')
# def get_book_by_isbn(isbn):
#     return_value={}
#     for book in books:
#         if book["isbn"] == isbn:
#             return_value={
#                 'name':book["name"],
#                 'price':book["price"]
#                 }
#     return jsonify(return_value)
# app.run(port=5000)
